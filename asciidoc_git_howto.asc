Book Title
==========
:Author:    Andrew Odewahn
:Email:     odewahn@oreilly.com

I'm following http://www.apeth.net/matt/iosbooktoolchain.html[Matt Neuburg article on how to write a book using asciidoc], but I want to do it with git, instead.  Here's the link to his article:


BTW, here's a nifty doc on AsciiDoc: http://powerman.name/doc/asciidoc[Asciidoc cheat sheet]

== Install git

You can grab git from here: http://git-scm.com/
It's got all the stuff you need -- just follow the directions.  Oh, well, one thing I needed to do:

There's a script called "setup git PATH for non-terminal programs.sh".  To get it to run on my system (I'm on a Mac OS X 10.5.7), I had to drop into a terminal and then type the command:

----
sudo sh "setup git PATH for non-terminal programs.sh"
----

== Textmate
TextMate is an editor that people seem to really like on the mac.  Download it from here:

http://macromates.com/

You can open all the files in a directory using the command *mate .*.  That will open the editor and also display a nav tree where you can navigate files.

Once you have TextMate, there are a couple of bundles (these are like macro command packages) that you can install.  These make life much easier for editing.

=== Install the asciidoc bundle

Once you have it, you can also install something  a bundle to make AsciiDoc work easier in textmate.  Here's what you do:

----
mkdir -p /Library/Application\ Support/TextMate/Bundles   
cd ~/"Library/Application Support/TextMate/Bundles/"
git clone git://github.com/zuckschwerdt/asciidoc.tmbundle.git "AsciiDoc.tmbundle"
osascript -e 'tell app "TextMate" to reload bundles'
----

On my system, there was a weird problem when the bundle editors tried to find the asciidoc command.  There's probably some environment variable or the other that I need to set, but here's what I did to fix it.  First, I located where MacPorts installed asciidoc, which you can do by dropping into a terminal and typing this:

----
$ which asciidoc

/opt/local/bin/asciidoc
----

Then go into the bundle editor (Bundles -> Bundle Editor -> Show Bundle Editor) and select the asciidoc bundle.  You can then go into the commands (the have "c" in fromt of them) and add this path in front of everyplace where asciidoc appears.  For example, here's the revised version of the "Preview" command:

----
if [[ -z $TM_FILENAME ]]
  then doc="-"
  else doc="$TM_FILEPATH"
fi
/opt/local/bin/asciidoc --attribute=imagesdir="file://$(pwd)" --out-file - "$doc" 2>&1 | perl -pe 's%(\w+): .*?: line ([0-9]+):%<b style="color:red">$1</b>: <a href="txmt://open/?line=$2">line $2</a>:%g'
----

[[FIG1]]
.Use TextMate's bundle editor to add in the path
image::figs/bundle_editor.png[width="600px"]

=== The git bundle

You can also set up a git bundle in textmate by doing these commands.  Not sure what this buys me yet, but here are the commands:

----
mkdir -p /Library/Application\ Support/TextMate/Bundles
cd !$
git clone http://git.gitorious.org/git-tmbundle/mainline.git Git.tmbundle
osascript -e 'tell app "TextMate" to reload bundles'
----
Finally, you'll need to add a path variable to tell TextMate where git is installed.  Go to "Preferences -> Advanced" and click the "Shell Variables" tab.  Then add a variable named "TM_GIT".  You can find the path to git using this command sequence:

----
$which git
/usr/local/git/bin/git 
----


=== Grab test repositories
I also grabbed some of the test repositories on our existing SVN system.  

----
svn checkout --username "odewahn@oreilly.com" "https://prod.oreilly.com/internal/books/sandbox_odewahn_RT79726/current/"
----


git svn clone --username "odewahn@oreilly.com" "https://prod.oreilly.com/internal/books/sandbox_odewahn_RT79726/current/"

== Set up git
Most of this is cribbed from Scott Chacon's "git in one hour" webcast http://www.youtube.com/watch?v=OFkgSjRnay4 


== Creating a Repository
There are two ways to create a repository:

* clone it from an exitsing repo
* run "git commit -m 'initial commit'"

* use "git status" to get a status of working changes
* use "git log" to get a log file of all commits 
* "git show" shows what the last commit was

== Adding Files 
Next, you need to add files using "git add <filename>"

== More commit options
Then you use "git commit -m 'some message'" to commit the changes
You can also used "git add <filename>" to stage your commits, which means that you can commit in different groups.  this is helpful if you want to create a clear audit trail of what you were doing.
	
* To just commit everything, you can use "git commit -a"
* To commit stuff in steps, use "git add <filename>"
	

== Pull down a git-scribe repo

git clone https://github.com/adamwitwer/git-scribe-test-aw.git

== Branches

git encourages you to do lots of little stuff inside branches, not just big stuff. For example, you might create a new branch to resolve a ticket, fix it in the branch, and then merge it back in later.  This is called a "topic branch".

The command to see a branch is called "git branch".

You can make a new branch using "git branch test" to create a new branch.  To work in the branch, you do "git checkout test".

You can make any changes you want in the directory, and all changes happen in just that branch.  So, you can add files, make new changes, or whatever, and they'll happen in only that one place.  Changes are saved at each commit. 

If you want to move back to another branch, all you have to do it check it back out and the files will look just as they did at the last commit point.

You can view all the activity in the branches using "gitk".  This will pop up a ltille browser to go through all the changes on the branch you're on.  You can use "gitk --all" to see the changes across all branches.  

== Merging
I need to review this section, but merging basically collapses two branches into a single branch.  You can then remove the topic branches using "git branch -d branch name" (double check this syntax)

You do something to add a remote server

You can then use "git fetch" to pull off some remote copy of the repository, but moves it into your repo as a separate branch.  This way you can inspect what someone else is doing, but not mess up your own work, which is really pretty cool.  You then merge that brach back in as you see fit.

== Comparing versions of files
Use "git diff" to see the differences between the current version of the repo and the new verion.  You can use "git diff | mate" to see the diff visualized in textmate, which is pretty cool.
